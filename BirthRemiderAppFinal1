import datetime
import calendar
class App:
    def  __init__(self, BirthDateInstance):
        self.BDinstance=BirthDateInstance
        self.Displayinstance= Display( BirthDateInstance )
        self.CountDayinstance= CountDays(BirthDateInstance,self.Displayinstance)

class Birthdate:
  def __init__(self,BD):
      # assumimg BD will be passed as DD-MM-YYYY format and as string
      mylist=BD.split('-')
      self.DD=int(mylist[0])
      self.MM=int(mylist[1])
      self.YY=int(mylist[2])           
class Display:
    def  __init__(self,BDinstance):
        self.BDinstance=BDinstance
        #self.message = None
        self.todayDate= datetime.date.today().strftime("%d-%m-%Y")
        mytodaylist=self.todayDate.split('-')
        self.TDD,self.TMM,self.TYY= int(mytodaylist[0]),int(mytodaylist[1]),int(mytodaylist[2])
        #print(self.TDD,self.TMM)
        self.message = None
class CountDays:
    def __init__(self,BDinstance,Displayinstance):
        #self.CBDinstance=BDinstance
        self.monthdiff= BDinstance.MM - Displayinstance.TMM
    
    def comingdays(daysdiff):
        if daysdiff in range(31,60) or daysdiff==29:
            return("Next Month")
            
        elif daysdiff==2:
            #print(" %d days from now" %daysdiff)
                
            return("Day After Tomorrow")
        elif daysdiff==1:
            #print(" %d days from now" %daysdiff)
                
            return(" Tomorrow")
        elif daysdiff==0:
            #print(" %d days from now" %daysdiff)
                
            return(" Today")
        else:
            return("%d days from now----"%daysdiff)
            
    def month(self):
        if self.monthdiff==1:
            md = calendar.monthrange(Displayinstance.TYY, Displayinstance.TMM)[1]
            daysdiff= (md -Displayinstance.TDD) + BDinstance.DD
            print(comingdays(daysdiff))
            return(comingdays(daysdiff))
        elif self.monthdiff==-1:
            md = calendar.monthrange(Displayinstance.TYY, BDinstance.MM)[1]
            daysdiff= (md - BDinstance.DD) + Displayinstance.TDD
            print(previousdays(daysdiff))
            return(previousdays(daysdiff))
        elif self.monthdiff >1:
            #print(" %d months from now" %self.monthdiff)

            return(" %d months from now" %self.monthdiff)
        elif self.monthdiff < -2:
            return(" %d months ago" %self.monthdiff)
        elif self.monthdiff ==0:
            daysdiff= BDinstance.DD - Displayinstance.TDD
            if daysdiff>=0:
                print("callling...")
                return(comingdays(daysdiff))
            else:
                return(previousdays(daysdiff)

    def prevoiusdays(daysdiff):
            if daysdiff in range(31,60) or daysdiff==29:
                
                return("Previous Month")
            elif daysdiff in range(21,28):
                #print(" %d days from now" %daysdiff)
                return("3 weeks Ago")
            
            
            
            elif daysdiff in range(8,14):
                return("2 weeks Ago")
            elif daysdiff==7:
                return("Last %s" %(datetime.date(self.TYY, BDinstance.MM, BDinstance.DD).strftime("%A")))
                
                
            elif daysdiff in range(3,7):
                #print(" %d days back" %daysdiff)
                
                return("%d days back" %daysdiff)
            elif daysdiff==2:
                #print(" %d days from now" %daysdiff)
                
                return("Day Before Yesterday")
            elif daysdiff==1:
                #print(" %d days from now" %daysdiff)
                
                return(" Yesterday")
            
            else:
                return("%d days agooo"%daysdiff)
            

       

        
        

#driver code:
yourbirthdate= input("please enter your birthdate---")
mybirthInstance=Birthdate(yourbirthdate)

JitenApp=App(mybirthInstance)

print(JitenApp.CountDayinstance.month())
